// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flyskea/lightalk-user/model/ent/userinfo"
)

// UserInfo is the model entity for the UserInfo schema.
type UserInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 用户ID
	UserID int64 `json:"user_id,omitempty"`
	// 用户性别
	Sex int8 `json:"sex,omitempty"`
	// 用户年龄
	Age int8 `json:"age,omitempty"`
	// 用户生日
	Birthday *string `json:"birthday,omitempty"`
	// 用户座右铭
	Motto string `json:"motto,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userinfo.FieldID, userinfo.FieldUserID, userinfo.FieldSex, userinfo.FieldAge:
			values[i] = new(sql.NullInt64)
		case userinfo.FieldBirthday, userinfo.FieldMotto:
			values[i] = new(sql.NullString)
		case userinfo.FieldCreatedAt, userinfo.FieldUpdatedAt, userinfo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserInfo fields.
func (ui *UserInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ui.ID = int(value.Int64)
		case userinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ui.CreatedAt = value.Time
			}
		case userinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ui.UpdatedAt = value.Time
			}
		case userinfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ui.DeletedAt = new(time.Time)
				*ui.DeletedAt = value.Time
			}
		case userinfo.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ui.UserID = value.Int64
			}
		case userinfo.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				ui.Sex = int8(value.Int64)
			}
		case userinfo.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				ui.Age = int8(value.Int64)
			}
		case userinfo.FieldBirthday:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				ui.Birthday = new(string)
				*ui.Birthday = value.String
			}
		case userinfo.FieldMotto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field motto", values[i])
			} else if value.Valid {
				ui.Motto = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserInfo.
// Note that you need to call UserInfo.Unwrap() before calling this method if this UserInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ui *UserInfo) Update() *UserInfoUpdateOne {
	return (&UserInfoClient{config: ui.config}).UpdateOne(ui)
}

// Unwrap unwraps the UserInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ui *UserInfo) Unwrap() *UserInfo {
	_tx, ok := ui.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserInfo is not a transactional entity")
	}
	ui.config.driver = _tx.drv
	return ui
}

// String implements the fmt.Stringer.
func (ui *UserInfo) String() string {
	var builder strings.Builder
	builder.WriteString("UserInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ui.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ui.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ui.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ui.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ui.UserID))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", ui.Sex))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", ui.Age))
	builder.WriteString(", ")
	if v := ui.Birthday; v != nil {
		builder.WriteString("birthday=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("motto=")
	builder.WriteString(ui.Motto)
	builder.WriteByte(')')
	return builder.String()
}

// UserInfos is a parsable slice of UserInfo.
type UserInfos []*UserInfo

func (ui UserInfos) config(cfg config) {
	for _i := range ui {
		ui[_i].config = cfg
	}
}
